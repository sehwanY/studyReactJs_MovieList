{"version":3,"sources":["Movie.js","navigation.js","App.js","serviceWorker.js","index.js"],"names":["Movie","react_default","a","createElement","className","Movie_MoviePoster","image","this","props","poster","alt","title","genres","map","genre","index","MovieGenre","key","lib_default","text","synopsis","maxLine","ellipsis","trimRight","Component","_ref","MoviePoster","src","navigation","_selectSort","_this","navUpdate","event","onClick","name","App","state","selected","_createNavigationData","setState","sortList","value","krLan","_getMovies","_callee","movieList","regenerator_default","wrap","_context","prev","next","_callApi","sent","stop","console","log","fetch","then","response","json","data","movies","catch","error","_renderMovieList","movie","src_Movie_0","title_english","medium_cover_image","id","_renderNavigation","src_navigation_0","_changeSort","MovieList","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.31e9cd44.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport LinesEllipsis from 'react-lines-ellipsis';\r\nimport './Movie.css';\r\n\r\nclass Movie extends Component{\r\n    \r\n     static propTypes = {\r\n        // prop의 예외처리에 매우 좋을 듯 하다.\r\n        // .isRequired 필수 title이라는 prop가 반드시 존재해야한다.\r\n        // .string , .number 형식지정 다를 경우 경고\r\n        title: PropTypes.string.isRequired,\r\n        poster: PropTypes.string.isRequired,\r\n        genres: PropTypes.array.isRequired,\r\n        synopsis: PropTypes.string.isRequired\r\n    }\r\n\r\n    render(){\r\n        //console.log(this.props);\r\n        return(\r\n            <div className=\"Movie\">\r\n                <div className=\"Movie__poster\">\r\n                    <MoviePoster image={this.props.poster} alt={this.props.title}/>\r\n                </div>\r\n                <div className=\"Movie__Culumns\">\r\n                    <h1>{this.props.title}</h1>\r\n                    <div className=\"Movie__Genres\">\r\n                        {this.props.genres.map((genre, index) => <MovieGenre genre={genre} key={index} />)}\r\n                    </div>\r\n                    <p className=\"Movie__Synopsis\">\r\n                        <LinesEllipsis \r\n                            text={this.props.synopsis}\r\n                            maxLine='3'\r\n                            ellipsis=\"...\"\r\n                            trimRight\r\n                        />\r\n                    </p>\r\n                </div>\r\n                \r\n                \r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nfunction MovieGenre({genre}){\r\n    return (\r\n        <span className=\"Movie__Genre\" alt=\"Movie Genre\"> {genre} </span>\r\n    )\r\n}\r\n\r\n\r\n// class가 아닌 function으로 정의할 경우 아래와 같이 한다.\r\n// Movie.propTypes = {}\r\n// MoviePoster.propTypes = { poster: PropTypes.string.isRequired }\r\n\r\n// JSX = 리액트로 작성하는 HTML\r\n// 큰 컴포넌트 안에 작은 컴포넌트를 넣는 방식으로 작업할 수 있다.\r\nclass MoviePoster extends Component{\r\n    render(){\r\n        return(\r\n                <img src={this.props.image} alt={this.props.alt} title={this.props.alt} />\r\n        );\r\n    }\r\n}\r\n\r\n\r\n\r\nexport default Movie","import React, { Component } from 'react';\r\nimport './navigation.css'\r\n\r\n\r\nclass navigation extends Component {\r\n\r\n    _selectSort = () =>{\r\n        this.props.navUpdate(this.props.event)\r\n    }\r\n\r\n    render(){\r\n        return(\r\n            <div className=\"navigation\">\r\n                <button onClick={this._selectSort} >\r\n                {this.props.name}\r\n                </button>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\n\r\nexport default navigation;","import React, { Component } from 'react';\nimport './App.css';\nimport Movie from './Movie';\nimport Navigation from './navigation';\n\nclass App extends Component {\n  // 흐름은 예정(will) -> 할 수 있다, 존재(did)\n  // Render: componentWillMount() -> render() -> componentDidMount()\n  \n  // UpDate componentWillReceiveProps() -> shouldComponentUpdate() -> componentWillUpdate() -> [ render() ] -> component\n  // ☆ old prop != new prop -> shouldComponentUpdate() == ture\n\n  state = {\n    selected: \"download_count\"\n  }\n\n  componentWillMount(){\n    // console.log(\"will mount\");\n    this._getMovies(this.state.selected);\n  }\n\n  componentDidMount(){\n    // console.log(\"did mount\");\n    // state를 바꿀 때는 반드시 this.setState({})를 사용해야한다.\n    // 기존의 데이터를 추가한다고 생각하자 '...' 을 += 라고 이해하면 편할거같다.\n    // ...this.state.movieList\n  }\n  \n  // 메뉴정보 최초 생성\n  // state에 해도 같음\n  _createNavigationData = () =>{\n    this.setState({\n      sortList : [\n        {\n          value: \"date_added\",\n          krLan: \"최신\"\n        },\n        {\n          value: \"title\",\n          krLan: \"제목\"\n        },\n        {\n          value: \"year\",\n          krLan: \"날짜\"\n        },\n        {\n          value: \"download_count\",\n          krLan: \"다운로드\"\n        },\n        {\n          value: \"like_count\",\n          krLan: \"좋아요\"\n        }\n      ]\n    })\n\n  return \"Test\";\n  }\n\n  // 영화정보를 가져오도록 요청한다.\n  // 정보 획득을 대기 후, 획득한 정보로 리스트를 만든다.\n  // async 동기함수 선언 await 사용가능 promises의 종료를 기다림, await this.~~~ 뒤에 오는 함수가 끝나길 기다리고 리턴 값을 받아라.\n  _getMovies = async (value) => {\n    const movieList = await this._callApi(value)\n    this.setState({\n      movieList\n    })\n  }\n\n  // 영화정보를 얻어온다.\n  _callApi = (value) => {\n    console.log(this._createNavigationData());\n    // AJAX 를 fetch 를 이용하여 간단히 불러올 수 있다. 비동기화\n    // body 부분에 ReadableStream 로 표현된 것을 볼 수있다. (제이슨으로 바꾸어줘야한다.)\n    return fetch(\"https://yts.am/api/v2/list_movies.json?sort_by=\"+ value)\n    .then((response) => response.json())\n    // ' => ' 자체에 return 이라는 뜻이 내제되어 있다.\n    .then(json => json.data.movies)\n    .catch((error)=>{\n      console.log(\"getData err :\" + error);\n    })\n  }\n\n  // 함수의 이름 앞에 _ 를 사용하는 이유는 React의 기능이 많기 때문에 이를 구분하기 위해서\n  // = () => \n  /* Movie 컴포넌트에 title이라는 이름으로 movie[0] 데이터를 전송 */\n  /* 데이터의 전달은 부모 컴포넌트가 자식 컴포넌트에게 행할 수 있다. */\n  /* patch Array나 foreach 라고 생각하면 편하다. for문의 동작도 합쳐진 느낌 */\n  /* 컴포넌트의 key는 상대적으로 느리다. */\n  _renderMovieList = () => {\n    \n    const movieList = this.state.movieList.map((movie) => {\n      return <Movie \n                title={movie.title_english} \n                poster={movie.medium_cover_image} \n                key={movie.id} \n                genres={movie.genres}\n                synopsis={movie.synopsis}\n              />\n    })\n    // const movieList 를 완성하고 반환한다.\n    return movieList;\n  }\n\n  // 메뉴정보를 구체화한다.\n  _renderNavigation = () => {\n    const navigation = this.state.sortList.map((data, index) => {\n      return <Navigation \n                name={data.krLan}\n                event={data.value}\n                key={index}\n                navUpdate={this._changeSort}\n              />\n    })\n\n    return navigation;\n  }\n\n  // 검색조건에 맞춰서 정보를 얻어온다.\n  _changeSort = (value) => {\n    this.setState({\n      movieList : null\n    })\n    this._getMovies(value)\n  }\n\n  render() {\n    // console.log(\"did render\");\n    return (\n      <div className={this.props.MovieList ? \"App\" : \"App--loading\"}>\n        <div className=\"App--nav\">\n          {/* 검색조건 */}\n          { this._renderNavigation() }\n        </div>\n        <div className=\"App--loading\">\n          {/* ? 를 통해 앞의 데이터가 존재하는지를 확인하고 true : false 로 처리한다. false 부분에는 로딩중인 컴포넌트를 따로 불러도 될 것 같다. */}\n          {this.state.movieList ? this._renderMovieList() : \"Loading\"}\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\n// 랜더한다 <App /> 를 , root라는 아이디를 가진 엘리먼트에.\n// DOM = Document Object Model \n// react는 UI라이브러리\nReactDOM.render(<App />, document.getElementById('root'));\nserviceWorker.unregister();\n"],"sourceRoot":""}